#version 130

in vec3 position;
in vec2 textureCoords;
in vec3 normal;

out vec2 pass_textureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out vec4 shadowCoords;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 toShadowMapSpace;

uniform vec3 lightPosition;

const float density = 0.0035;
const float gradient = 10.0;
const float shadowDistance = 150.0;
const float shadowTransDistance = 10.0;

void main(void){

    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);

    shadowCoords = toShadowMapSpace * worldPosition;

    vec4 positionRelativeToCam = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * positionRelativeToCam;
    pass_textureCoords = textureCoords;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    toLightVector = lightPosition - worldPosition.xyz;
    toCameraVector = (-(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;

     float distance = length(positionRelativeToCam.xyz);
     visibility = exp(-pow((distance * density),gradient));
     visibility = clamp(visibility, 0.0, 1.0);

     distance =  distance - (shadowDistance -  shadowTransDistance);
     distance = distance / shadowTransDistance;
     shadowCoords.w = clamp(1.0 - distance, 0.0, 1.0);

}